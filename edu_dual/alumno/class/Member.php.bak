<?php
namespace Phppot;

use \Phppot\DataSource;

class Member
{

    private $dbConn;

    private $ds;

    function __construct()
    {
        require_once "DataSource.php";
        $this->ds = new DataSource();
    }

    function getMemberById($memberId)
    {
        $query = "SELECT usuarios.idusuario,usuarios.apellidos,usuarios.nombres,usuarios.clave_sie,usuarios.contrasenia,
		usuarios.contrasenia,
		usuarios.email,usuarios.telefono,usuarios.foto,usuarios.idperfil,perfiles_usuarios.nombre_perfil from usuarios 
		join perfiles_usuarios on usuarios.idperfil = perfiles_usuarios.idperfil where usuarios.idusuario = ?";
        $paramType = "i";
        $paramArray = array($memberId);
        $memberResult = $this->ds->select($query, $paramType, $paramArray);
        
		$_SESSION["idperfil"] = $memberResult[0]["idperfil"];
		
        return $memberResult;
    }
    
    public function processLogin($username, $password) {
        $query = "select * FROM usuarios WHERE clave_sie = ? OR email = ?";
        $paramType = "ss";
        $paramArray = array($username, $username);
        $memberResult = $this->ds->select($query, $paramType, $paramArray);
        if(!empty($memberResult)) {
            $hashedPassword = $memberResult[0]["contrasenia"];
            if (password_verify($password, $hashedPassword)) {
                $_SESSION["userId"] = $memberResult[0]["idusuario"];
				$_SESSION["idperfil"] = $memberResult[0]["idperfil"];
                return true;
            }
        }
        return false;
    }
	
	//agrega un nuevo usuario
function addMember($apellidos, $nombres, $clave_sie, $password, $email, $telefono, $photo = null, $idperfil)
{
	$email=strtolower(trim($email));
	$clave_sie=strtolower(trim($clave_sie));
    // Encriptar la contraseña utilizando bcrypt
    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);

    $query = "INSERT INTO usuarios (apellidos, nombres, clave_sie, contrasenia, email, telefono, foto, idperfil) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
    $paramType = "sssssssi";

    // Aquí debemos usar la contraseña encriptada
    $paramArray = array($apellidos, $nombres, $clave_sie, $hashedPassword, $email, $telefono, $photo, $idperfil);

    // Ejecutar la consulta e insertar el usuario
    $insertId = $this->ds->insert($query, $paramType, $paramArray);

    // Devolver el ID insertado o false si falló la inserción
    if ($insertId) {
        return $insertId;
    } else {
        return false;
    }
}


//edita un usuario
function updateMember($id, $userName, $displayName, $password = null, $email, $photo = null, $about = null)
{
    // Comprobar si se debe actualizar la contraseña
    if ($password) {
        // Encriptar la nueva contraseña
        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
        $query = "UPDATE registered_users SET user_name = ?, display_name = ?, password = ?, email = ?, photo = ?, about = ? WHERE id = ?";
        $paramType = "ssssssi";
        $paramArray = array($userName, $displayName, $hashedPassword, $email, $photo, $about, $id);
    } else {
        // No actualizar la contraseña si no se proporciona
        $query = "UPDATE registered_users SET user_name = ?, display_name = ?, email = ?, photo = ?, about = ? WHERE id = ?";
        $paramType = "sssssi";
        $paramArray = array($userName, $displayName, $email, $photo, $about, $id);
    }

    $this->ds->execute($query, $paramType, $paramArray);
}

//obtiene los datos por clave_sie o por email para ver si existe la cuenta:
public function getUserByClaveSIEOrEmail($clave_sie, $email, $idperfil)
{
    $query = "SELECT * FROM usuarios WHERE clave_sie = ? OR email = ? and idperfil= ?";
    $paramType = "ssi";
    $paramArray = array($clave_sie, $email, $idperfil);
    $result = $this->ds->select($query, $paramType, $paramArray);
    return $result;
}




}
